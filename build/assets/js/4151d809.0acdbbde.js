"use strict";(self.webpackChunkdso_dev_blog=self.webpackChunkdso_dev_blog||[]).push([[741],{2473:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var s=n(4848),t=n(8453);const r={sidebar_label:"Lifecycle in Git",title:"Lifecycle in Git"},o="Git Lifecycle",c={id:"knowledge-base/git/lifecycle-in-git",title:"Lifecycle in Git",description:"The Git lifecycle consists of several states that files can occupy as they are modified, staged, and committed in a repository. Understanding this lifecycle is essential for efficient version control using Git.",source:"@site/docs/knowledge-base/git/00-lifecycle-in-git.md",sourceDirName:"knowledge-base/git",slug:"/knowledge-base/git/lifecycle-in-git",permalink:"/devsecops-blog/docs/knowledge-base/git/lifecycle-in-git",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_label:"Lifecycle in Git",title:"Lifecycle in Git"},sidebar:"tutorialSidebar",previous:{title:"Git",permalink:"/devsecops-blog/docs/category/git"},next:{title:"Branches",permalink:"/devsecops-blog/docs/knowledge-base/git/branches"}},l={},d=[{value:"Key States in Git",id:"key-states-in-git",level:2},{value:"Git Commands and Their Purpose",id:"git-commands-and-their-purpose",level:2},{value:"Typical Workflow",id:"typical-workflow",level:2},{value:"Summary",id:"summary",level:2}];function a(e){const i={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"git-lifecycle",children:"Git Lifecycle"})}),"\n",(0,s.jsx)(i.p,{children:"The Git lifecycle consists of several states that files can occupy as they are modified, staged, and committed in a repository. Understanding this lifecycle is essential for efficient version control using Git."}),"\n",(0,s.jsx)(i.h2,{id:"key-states-in-git",children:"Key States in Git"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Working Directory"}),":"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"This is the local directory on your machine where you make changes to your files. All the files in your project are present here, and you can edit them freely."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Staging Area (Index)"}),":"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["After editing files in your working directory, you stage them using the ",(0,s.jsx)(i.code,{children:"git add"})," command. This moves changes to the staging area, preparing them to be committed. The staging area allows you to control which changes are included in the next commit."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Repository (Commit History)"}),":"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["When you are ready to save your staged changes, you create a commit with ",(0,s.jsx)(i.code,{children:"git commit"}),". This command takes everything from the staging area and saves it to the repository, along with a commit message that describes the changes. The commit history is maintained as a series of snapshots of your project over time."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"git-commands-and-their-purpose",children:"Git Commands and Their Purpose"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:(0,s.jsx)(i.code,{children:"git init"})}),": Initializes a new Git repository."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:(0,s.jsx)(i.code,{children:"git clone [repository]"})}),": Creates a copy of an existing repository."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:(0,s.jsx)(i.code,{children:"git status"})}),": Shows the current state of the working directory and staging area."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:(0,s.jsx)(i.code,{children:"git add [file]"})}),": Stages changes in the specified file(s) for the next commit."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:(0,s.jsx)(i.code,{children:'git commit -m "[message]"'})}),": Commits staged changes to the repository with a descriptive message."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:(0,s.jsx)(i.code,{children:"git log"})}),": Displays the commit history of the repository."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:(0,s.jsx)(i.code,{children:"git push [remote] [branch]"})}),": Sends commits from your local repository to a remote repository."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:(0,s.jsx)(i.code,{children:"git pull [remote] [branch]"})}),": Fetches changes from a remote repository and merges them into your local branch."]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"typical-workflow",children:"Typical Workflow"}),"\n",(0,s.jsxs)(i.ol,{children:["\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Start a New Repository"}),":"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Use ",(0,s.jsx)(i.code,{children:"git init"})," to create a new repository or ",(0,s.jsx)(i.code,{children:"git clone [repository]"})," to copy an existing one."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Make Changes"}),":"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Modify files in the working directory."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Check Status"}),":"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Use ",(0,s.jsx)(i.code,{children:"git status"})," to see which files have been modified."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Stage Changes"}),":"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Stage the files you want to include in your next commit using ",(0,s.jsx)(i.code,{children:"git add [file]"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Commit Changes"}),":"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Commit the staged changes with a descriptive message using ",(0,s.jsx)(i.code,{children:'git commit -m "[message]"'}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Repeat"}),":"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsx)(i.li,{children:"Continue to make changes, stage, and commit as necessary. This process is iterative."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Push Changes"}),":"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Once you're ready to share your work, push your commits to a remote repository with ",(0,s.jsx)(i.code,{children:"git push"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(i.li,{children:["\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"Pull Changes"}),":"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Regularly pull changes from the remote repository with ",(0,s.jsx)(i.code,{children:"git pull"})," to keep your local repository up to date."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(i.p,{children:"The Git lifecycle is crucial for effective version control. By understanding the states and commands associated with Git, you can manage your project's changes efficiently and collaborate effectively with others."})]})}function h(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>o,x:()=>c});var s=n(6540);const t={},r=s.createContext(t);function o(e){const i=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(r.Provider,{value:i},e.children)}}}]);